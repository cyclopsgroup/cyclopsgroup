<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Welcom to Levistone</title>
		<author email="jiaqi.guo@gmail.com">Guo, Jiaqi</author>
	</properties>
	<body>
		<section name="What is Levistone">
			<p>All cyclops group projects are target to make things simple and generic. Levistone is not an exception.</p>
			<p>Levistone is a database api for developer to access database in a simple and generic way.
				<ul>
					<li><b>Levistone is NOT another OR mapping tool. </b> It's API and adapters for other OR mapping tools including hibernate, jdo, torque and OJB.</li>
					<li><b>Levistone is NOT a standard to hide JDBC.</b> In levistone, there is an adapter directly for JDBC. However since the goal of levistone is to provide simple and generic API, it's definitely not as powerful as what JDBC can do.</li>
					<li><b>Levistone is NOT a database connection pool.</b> Levistone uses existing javax.sql.DataSource (thru JNDI) to get connection. Even if there isn't any data source, developer and configure a DBCP data source in levistone.</li>
					<li><b>Levistone is NOT a database caching system.</b> Developers can configure levistone as a caching system if they want. However levistone itself doesn't know how to cache, it will acts more like an adapter between another levistone and an existing caching system.</li>
					<li><b>For now, Levistone is NOT a cluster adapter of other adapters.</b> It will be cool if levistone can collect existing JDO system and hibernate entities to one API. But now, this feature is not on the todo list.</li>
				</ul>
			</p>
		</section>
		<section name="Why do I need it?">
			<p>There are already many excellent OR mapping tool, db tool and caching system in the open source world. If you are an faithful hibernate developer, you don't need levistone at all.</p>
			<p>Levistone is for the senario that people want to keep the flexibility to switch the implementation of persistence layer, and don't want to be too painful when the code is changed. Levistone can not guarantee that you don't need to change any code when switching from hibernate to JDO, but it keeps the effort as little as possible.</p>
		</section>
		<section name="What Levistone can do">
			<p>As a hibernate adapter</p>
			<p>As a apache torque adapter</p>
			<p>As a JDO adapter</p>
			<p>As a apache OJB adapter</p>
			<p>As a OR mapping tool directly accessing JDBC</p>
			<p>As a caching system of another levistone adapter</p>
			<p>As a remote client of another levistone adapter</p>
		</section>
		<section name="Limitation">
			<p>As a simple and generic api, Levitone is definitely not as powerful as the tools it adapts.</p>
			<p>Levistone project is just lanched. Most of the modules are still nothing but ideas.</p>
		</section>
	</body>
</document>