<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:j="jelly:core" xmlns:doc="doc">
    <goal name="xtorque:init" description="Build classpath and define tasks">
        <!-- Setup the classpath for torque plugins -->
        <path id="xtorque-classpath">
            <pathelement path="${plugin.getDependencyPath('commons-collections')}"/>
            <pathelement path="${plugin.getDependencyPath('commons-lang')}"/>
            <pathelement path="${plugin.getDependencyPath('log4j')}"/>
            <pathelement path="${plugin.getDependencyPath('velocity')}"/>
            <pathelement path="${plugin.getDependencyPath('village')}"/>
            <pathelement path="${plugin.getDependencyPath('xercesImpl')}"/>
            <pathelement path="${plugin.getDependencyPath('xml-apis')}"/>
            <pathelement path="${plugin.getDependencyPath('torque:torque-gen')}"/>
            <pathelement path="${pom.getDependencyClasspath()}"/>
            <pathelement path="${plugin.resources}"/>
            <path refid="maven.dependency.classpath"/>
        </path>
        <!-- The default.properties file will map old properties to the new ones along
         with setting the correct defaults.

         Note: I have no idea why this file is not already processed by the plugin..
      -->
        <property file="${maven.plugin.dir}/maven-torque-plugin-3.2/plugin.properties"/>
        <!-- Define all of the tasks -->
        <taskdef name="xtorque-data-model" classpathref="xtorque-classpath" classname="org.apache.torque.task.TorqueDataModelTask"/>
    </goal>
    <!--
==============================================
=
=  Copy and delete sqldb.map file
=
==============================================
    -->
    <goal name="xtorque:copy-sqlmap-file" prereqs="torque:init" description="Copy sqldb.map file into sql folder">
        <j:set var="sqldbmap">${pom.getPluginContext('maven-torque-plugin').getVariable('torque.schema.dir')}/sqldb.map</j:set>
        <j:set var="sqldir">${pom.getPluginContext('maven-torque-plugin').getVariable('torque.sql.dir')}</j:set>
        <copy file="${sqldbmap}" todir="${sqldir}" overwrite="true"/>
    </goal>
    <goal name="xtorque:delete-sqlmap-file" prereqs="torque:init" description="Delete sqldb.map file from sql folder">
        <j:set var="sqldir">${pom.getPluginContext('maven-torque-plugin').getVariable('torque.sql.dir')}</j:set>
        <delete file="${sqldir}/sqldb.map"/>
    </goal>
    <!--
==============================================
=
=  Generate data sql files for multi torque projects
=
==============================================
    -->
    <goal name="xtorque:datasql" prereqs="torque:init" description="Generate data sql files for multi torque projects">
        <attainGoal name="xtorque:copy-sqlmap-file"/>
        <j:useBean var="fileScanner" class="com.cyclops.amulets.xtorque.FileScanner" folder="${pom.getPluginContext('maven-torque-plugin').getVariable('torque.schema.dir')}" suffix="${maven.xtorque.data.suffix}"/>
        <j:forEach var="dataModel" items="${fileScanner.modelNames}">
            ${pom.getPluginContext('maven-torque-plugin').setVariable('torque.project', dataModel)}
            <echo>Generating data sqls for ${pom.getPluginContext('maven-torque-plugin').getVariable('torque.project')}${maven.xtorque.data.suffix}</echo>
            <attainGoal name="torque:datasql"/>
        </j:forEach>
    </goal>
    <goal name="torque:datasqls" prereqs="xtorque:datasql" description="Generate data sql files for multi torque projects"/>
    <!--
==============================================
=
=  Insert a set of SQL script from xtorque plugin
=
==============================================
    -->
    <goal name="xtorque:insert-sql" prereqs="torque:init" description="Insert a set of SQL script from xtorque plugin">
        <attainGoal name="xtorque:copy-sqlmap-file"/>
        <attainGoal name="torque:insert-sql"/>
    </goal>
    <goal name="torque:insert-sqls" prereqs="xtorque:insert-sql" description="Insert a set of SQL script"/>
    <!--
==============================================
=
=  Torque report stuff
=
==============================================
    -->
    <goal name="xtorque:doc" prereqs="xtorque:init">
        <j:set var="schemadir">${maven.gen.docs}/database</j:set>
        <mkdir dir="${schemadir}"/>
        ${pom.getPluginContext('maven-torque-plugin').setVariable('torque.doc.format', 'anakia')}
        ${pom.getPluginContext('maven-torque-plugin').setVariable('torque.doc.dir', schemadir)}
        <attainGoal name="torque:doc"/>
        <echo>${plugin.resources}</echo>
        <xtorque-data-model contextProperties="${pom.getPluginContext('maven-torque-plugin').getVariable('torque.contextProperties')}" controlTemplate="templates/report.vm" templatePath="${plugin.resources}" outputDirectory="${maven.gen.docs}" outputFile="schema-report.xml" targetDatabase="${pom.getPluginContext('maven-torque-plugin').getVariable('torque.database')}" targetPackage="${pom.getPluginContext('maven-torque-plugin').getVariable('torque.targetPackage')}" useClasspath="false">
            <fileset dir="${pom.getPluginContext('maven-torque-plugin').getVariable('torque.schema.dir')}" includes="*-${maven.xtorque.schema.suffix}"/>
        </xtorque-data-model>
    </goal>
    <goal name="maven-xtorque-plugin:register">
        <doc:registerReport name="Database Schemas" pluginName="xtorque" link="schema-report.html" description="Detail database schemas"/>
    </goal>
    <goal name="maven-xtorque-plugin:deregister">
        <doc:deregisterReport name="Database Schemas"/>
    </goal>
    <goal name="maven-xtorque-plugin:report">
        <attainGoal name="xtorque:doc"/>
    </goal>
</project>
