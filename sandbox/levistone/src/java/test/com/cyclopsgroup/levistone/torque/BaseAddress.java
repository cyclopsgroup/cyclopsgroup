package com.cyclopsgroup.levistone.torque;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;



/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Dec 23 12:05:28 CST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Address
 */
public abstract class BaseAddress extends BaseObject
{
    /** The Peer class */
    private static final AddressPeer peer =
        new AddressPeer();

        
    /** The value for the id field */
    private long id;
      
    /** The value for the details1 field */
    private String details1;
      
    /** The value for the details2 field */
    private String details2;
      
    /** The value for the city field */
    private String city;
      
    /** The value for the state field */
    private String state;
      
    /** The value for the zipCode field */
    private String zipCode;
                                                
    /** The value for the country field */
    private String country = "us";
      
    /** The value for the userId field */
    private long userId;
  
    
    /**
     * Get the Id
     *
     * @return long
     */
    public long getId()
    {
        return id;
    }

                        
    /**
     * Set the value of Id
     *
     * @param v new value
     */
    public void setId(long v) 
    {
    
                  if (this.id != v)
              {
            this.id = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Details1
     *
     * @return String
     */
    public String getDetails1()
    {
        return details1;
    }

                        
    /**
     * Set the value of Details1
     *
     * @param v new value
     */
    public void setDetails1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.details1, v))
              {
            this.details1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Details2
     *
     * @return String
     */
    public String getDetails2()
    {
        return details2;
    }

                        
    /**
     * Set the value of Details2
     *
     * @param v new value
     */
    public void setDetails2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.details2, v))
              {
            this.details2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the City
     *
     * @return String
     */
    public String getCity()
    {
        return city;
    }

                        
    /**
     * Set the value of City
     *
     * @param v new value
     */
    public void setCity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.city, v))
              {
            this.city = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ZipCode
     *
     * @return String
     */
    public String getZipCode()
    {
        return zipCode;
    }

                        
    /**
     * Set the value of ZipCode
     *
     * @param v new value
     */
    public void setZipCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.zipCode, v))
              {
            this.zipCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Country
     *
     * @return String
     */
    public String getCountry()
    {
        return country;
    }

                        
    /**
     * Set the value of Country
     *
     * @param v new value
     */
    public void setCountry(String v) 
    {
    
                  if (!ObjectUtils.equals(this.country, v))
              {
            this.country = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the UserId
     *
     * @return long
     */
    public long getUserId()
    {
        return userId;
    }

                              
    /**
     * Set the value of UserId
     *
     * @param v new value
     */
    public void setUserId(long v) throws TorqueException
    {
    
                  if (this.userId != v)
              {
            this.userId = v;
            setModified(true);
        }
    
                          
                if (aUser != null && !(aUser.getId() == v))
                {
            aUser = null;
        }
      
              }
  
      
    
                  
    
        private User aUser;

    /**
     * Declares an association between this object and a User object
     *
     * @param v User
     * @throws TorqueException
     */
    public void setUser(User v) throws TorqueException
    {
            if (v == null)
        {
                    setUserId((long) 0);
                  }
        else
        {
            setUserId(v.getId());
        }
                aUser = v;
    }

                                            
    /**
     * Get the associated User object
     *
     * @return the associated User object
     * @throws TorqueException
     */
    public User getUser() throws TorqueException
    {
        if (aUser == null && (this.userId > 0))
        {
                          aUser = UserPeer.retrieveByPK(SimpleKey.keyFor(this.userId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               User obj = UserPeer.retrieveByPK(this.userId);
               obj.addAddresss(this);
            */
        }
        return aUser;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
           */
    public void setUserKey(ObjectKey key) throws TorqueException
    {
      
                        setUserId(((NumberKey) key).longValue());
                  }
       
                
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(AddressPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    AddressPeer.doInsert((Address) this, con);
                    setNew(false);
                }
                else
                {
                    AddressPeer.doUpdate((Address) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }


                    
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setId(((NumberKey) key).longValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setId(Long.parseLong(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Address copy() throws TorqueException
    {
        return copyInto(new Address());
    }
  
    protected Address copyInto(Address copyObj) throws TorqueException
    {
          copyObj.setId(id);
          copyObj.setDetails1(details1);
          copyObj.setDetails2(details2);
          copyObj.setCity(city);
          copyObj.setState(state);
          copyObj.setZipCode(zipCode);
          copyObj.setCountry(country);
          copyObj.setUserId(userId);
  
                    copyObj.setId((long) 0);
                                                      
        
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public AddressPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Address:\n");
        str.append("Id = ")
           .append(getId())
           .append("\n");
        str.append("Details1 = ")
           .append(getDetails1())
           .append("\n");
        str.append("Details2 = ")
           .append(getDetails2())
           .append("\n");
        str.append("City = ")
           .append(getCity())
           .append("\n");
        str.append("State = ")
           .append(getState())
           .append("\n");
        str.append("ZipCode = ")
           .append(getZipCode())
           .append("\n");
        str.append("Country = ")
           .append(getCountry())
           .append("\n");
        str.append("UserId = ")
           .append(getUserId())
           .append("\n");
        return(str.toString());
    }
}
